import os
import random

import requests
from telegram.utils.request import Request
import string

from django.core.management.base import BaseCommand
from telegram import ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup, Update, Bot
from telegram.ext import CallbackContext, Updater, MessageHandler, Filters, CallbackQueryHandler

from bot.models import *
from tl_shop import settings




def log_errors(f):
    def inner(*args, **kwargs):
        try:
            return f(*args, **kwargs)
        except Exception as e:
            error_message = f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}'
            print(error_message)
            raise e

    return inner


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ qiwi
def payment_history_last(pk):
    s = requests.Session()
    s.headers['authorization'] = 'Bearer ' + settings.Token
    parameters = {'rows': 50}
    h = s.get('https://edge.qiwi.com/payment-history/v2/persons/' + settings.Phone + '/payments', params=parameters).json()
    order = Order.objects.get(pk=pk)
    res = "NO"
    if order.step == 2:
        for transition in h["data"]:
            if order.pay == transition["sum"]["amount"] and order.code == transition["comment"]:
                res = "OK"
                order.step = 3
                order.save()
    return res


# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
def generate_name():
    length = 10
    letters = string.ascii_letters + string.digits
    rand_string = ''.join(random.choice(letters) for i in range(length))
    return rand_string


# –ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å
def get_mess(pk, text):
    message, _ = MessageText.objects.get_or_create(pk=pk, defaults={"message": text})
    return message.message


# –ü–æ–ª—É—á–∏—Ç—å –∫–Ω–æ–ø–∫—É –º–µ–Ω—é –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å
def get_menu(pk, text):
    menu, _ = MenuText.objects.get_or_create(pk=pk, defaults={"button": text})
    return menu.button


# –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å
def get_person(chat_id, name=""):
    p, _ = Profile.objects.get_or_create(
        external_id=chat_id,
        defaults={
            'name': name,
            'level': 1
        }
    )
    return p


# –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –∫–Ω–æ–ø–æ–∫
def build_menu(buttons, n_cols,
               header_buttons=None,
               footer_buttons=None):
    menu = [buttons[i:i + n_cols] for i in range(0, len(buttons), n_cols)]
    if header_buttons:
        menu.insert(0, [header_buttons])
    if footer_buttons:
        menu.append([footer_buttons])
    return menu.json


# –°–æ–±–∏—Ä–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
def zparse_data(p, data):
    order = p.order.filter(step__in=[1])[0]
    product = order.product
    kol_enter = order.data_kol + 1
    order.data_kol = kol_enter
    order.data_have = order.data_have + data + "\n"
    order.save()

    message_text = reply_markup = ""
    if len(product.data.split("\n")) == kol_enter:
        # –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã
        order.step = 2
        order.code = ''.join(random.choice("0123456789") for i in range(9))
        order.save()
        message_text = get_mess(8, """üî•–î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é —Å—É–º–º—É –æ–¥–Ω–∏–º –ø–ª–∞—Ç–µ–∂–æ–º –Ω–∞ —ç—Ç–æ—Ç QIWI –∫–æ—à–µ–ª–µ–∫: 

https://qiwi.com/p/{phone}

—Å–æ —Å–ª–µ–¥—É—é—â–∏–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º –∫ –ø–µ—Ä–µ–≤–æ–¥—É
{code}
‚õîÔ∏è–û—á–µ–Ω—å –≤–∞–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–¥ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, –∏–Ω–∞—á–µ –ø–ª–∞—Ç–µ–∂ –Ω–µ –±—É–¥–µ—Ç –∑–∞—Å—á–∏—Ç–∞–Ω!
Ô∏è–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–ø–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂""").format(phone=settings.Phone, code=order.code)
        keyboard = [[InlineKeyboardButton(get_menu(8, "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂"), callback_data='check-' + str(order.pk))]]
        reply_markup = InlineKeyboardMarkup(keyboard)
    else:
        # –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ –§–ò–û, —Ç–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∑–∞–∫–∞–∑
        if kol_enter == 1:
            order.fio = data
            order.save()
        elif kol_enter == 2:
            order.phone = data
            order.save()
        message_text = get_mess(5, "–ü–æ–∂–∞–ª—É–π—Å—Ç–≤–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ/–≤–≤–µ–¥–∏—Ç–µ {data}").format(
            data=product.data.split("\n")[kol_enter])
    return (message_text, reply_markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
@log_errors
def do_echo(update: Update, context: CallbackContext):
    chat_id = update.message.chat_id
    text = update.message.text

    p = get_person(chat_id, update.message.from_user.username)
    message_text = get_mess(7, "–ú—ã –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª–∏")
    reply_markup = ""

    if text == "/start" or text == "–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∫—É–ø–∫—É":
        if text == "–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∫—É–ø–∫—É" and p.order.filter(step__in=[1]).count() > 0:
            # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–∫–∞–∑
            order = p.order.filter(step__in=[1])[0]
            order.step = 6
            order.save()
            update.message.reply_text(text=get_mess(6, "–ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞"))
        # –°—Ç–∞—Ä—Ç
        message_text = get_mess(1, "üëã –î–æ–±—Ä—ã–π –¥–µ–Ω—å! –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é")
        reply_markup = ReplyKeyboardMarkup([
            [get_menu(1, "üìã –¢–∞—Ä–∏—Ñ—ã")],
            [get_menu(2, "üìù –û—Ç–∑—ã–≤—ã"), get_menu(3, "‚≠êÔ∏è –ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞")],
            [get_menu(4, "‚öôÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞")]
        ])
    elif MenuText.objects.filter(button=text).count() != 0:
        button = MenuText.objects.filter(button=text)[0]
        if button.pk == 1:
            message_text = get_mess(2, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –∏–∑ —Å–ø–∏—Å–∫–∞")
            keyboard = [[InlineKeyboardButton(cat.text, callback_data='cat-' + str(cat.pk))] for cat in
                        Category.objects.filter(nesting_level=1)]
            reply_markup = InlineKeyboardMarkup(keyboard)
        elif button.pk == 2:
            message_text = get_mess(11, "–û—Ç–∑—ã–≤—ã –æ –Ω–∞—Å:")
        elif button.pk == 3:
            message_text = get_mess(12, "–í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
        elif button.pk == 4:
            message_text = get_mess(13, "–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω—É: ")
    elif p.order.filter(step__in=[1]).count() != 0:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        message_text, reply_markup = parse_data(p, text)

    if type(reply_markup) == str:
        update.message.reply_text(
            text=message_text
        )
    else:
        update.message.reply_text(
            text=message_text,
            reply_markup=reply_markup
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∞–π–ª–æ–≤
@log_errors
def message_files(update: Update, context: CallbackContext):
    chat_id = update.message.chat_id
    # –ö–∞—á–∞–µ–º —Ñ–∞–π–ª
    if update.message.document is None:
        file_id = update.message.photo[-1].file_id
        file_ras = "jpg"
    else:
        file_id = update.message.document.file_id
        file_ras = update.message.document.file_name.split('.')[-1]
    new_file = context.bot.get_file(file_id)
    path = os.path.join(settings.MEDIA_ROOT, 'documents') + "/"
    name = str(generate_name()) + "." + file_ras
    new_file.download(path + name)

    # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Ñ–∞–π–ª –∫ –º–æ–¥–µ–ª–∏
    file_ord = FileOrder()
    file_ord.file_order.name = "documents/" + name
    file_ord.save()

    p = get_person(chat_id, update.message.from_user.username)
    message_text = get_mess(7, "–ú—ã –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª–∏")
    reply_markup = ""
    if p.order.filter(step__in=[1]).count() != 0:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        file_ord.order = p.order.filter(step__in=[1])[0]
        file_ord.save()
        message_text, reply_markup = parse_data(p, settings.DOMAIN + file_ord.file_order.url)

    if type(reply_markup) == str:
        update.message.reply_text(
            text=message_text
        )
    else:
        update.message.reply_text(
            text=message_text,
            reply_markup=reply_markup
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Inline –∫–Ω–æ–ø–æ–∫
@log_errors
def button(update: Update, context: CallbackContext):
    chat_id = context._chat_id_and_data[0]
    query = update.callback_query
    # –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    p = get_person(chat_id)

    variant = query.data.split("-")
    message_text = reply_markup = ""
    # –û—Ç–º–µ–Ω—è–µ–º –ø–æ–∫—É–ø–∫—É, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–∞ inline –∫–Ω–æ–ø–∫—É
    if p.order.filter(step__in=[1]).count() != 0:
        order = p.order.filter(step__in=[1])[0]
        order.step = 6
        order.save()
        update.message.reply_text(text=get_mess(6, "–ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞"))
    if variant[0] == "cat":
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        cat = Category.objects.get(pk=int(variant[1]))
        if (cat.nested_category.count() > 0):
            message_text = get_mess(2, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –∏–∑ —Å–ø–∏—Å–∫–∞")
            keyboard = [[InlineKeyboardButton(cat.text, callback_data='cat-' + str(cat.pk))] for cat in
                        cat.nested_category.all()]
            reply_markup = InlineKeyboardMarkup(keyboard)
        else:
            message_text = get_mess(3, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏–∑ —Å–ø–∏—Å–∫–∞")
            keyboard = [[InlineKeyboardButton(product.name, callback_data='product-' + str(product.pk))] for product in
                        cat.products.all()]
            reply_markup = InlineKeyboardMarkup(keyboard)
    elif variant[0] == "product":
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ —Ç–æ–≤–∞—Ä
        product = Product.objects.get(pk=int(variant[1]))

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –∏ –æ–ø–∏—Å–∞–Ω–∏—è
        context.bot.send_photo(chat_id=chat_id, photo=open(product.img.path, 'rb'))
        context.bot.sendMessage(chat_id=chat_id, text=product.text)
        # –ó–∞–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã
        if product.ask != "":
            message_text = product.ask.split(";")[0]
            keyboard = [
                [InlineKeyboardButton("–î–∞", callback_data='yes-' + str(product.pk) + "-" + "0"),
                 InlineKeyboardButton("–ù–µ—Ç", callback_data='no-' + str(product.pk) + "0")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
        else:
            # –í—ã–∑—ã–≤–∞–µ–º —Ü–µ–Ω—É
            price_list = [product.price1, product.price2, product.price3, product.price4, product.price5]
            message_text = get_mess(4, "–ö –æ–ø–ª–∞—Ç–µ: {price} —Ä—É–±.").format(price=price_list[p.level - 1])
            keyboard = [[InlineKeyboardButton(get_menu(6, "–ö—É–ø–∏—Ç—å"), callback_data='buy-' + str(product.pk))]]
            reply_markup = InlineKeyboardMarkup(keyboard)
    elif variant[0] == "buy":
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –∫—É–ø–∏—Ç—å
        product = Product.objects.get(pk=int(variant[1]))
        price_list = [product.price1, product.price2, product.price3, product.price4, product.price5]
        order = Order(step=1, product=product, user=p, pay=price_list[p.level - 1])
        order.save()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        description = product.description.split(";")
        for message in description:
            if message != "":
                context.bot.sendMessage(chat_id=chat_id, text=message)
        # –ü—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
        message_text = get_mess(5, "–ü–æ–∂–∞–ª—É–π—Å—Ç–≤–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ/–≤–≤–µ–¥–∏—Ç–µ {data}").format(data=product.data.split("\n")[0])
        reply_markup = ReplyKeyboardMarkup([
            [get_menu(7, "–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∫—É–ø–∫—É")]
        ])
    elif variant[0] == "check":
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞
        res = payment_history_last(variant[1])
        reply_markup = ReplyKeyboardMarkup([
            [get_menu(1, "üìã –¢–∞—Ä–∏—Ñ—ã")],
            [get_menu(2, "üìù –û—Ç–∑—ã–≤—ã"), get_menu(3, "‚≠êÔ∏è –ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞")],
            [get_menu(4, "‚öôÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞")]
        ])
        if res == "OK":
            message_text = get_mess(9, "–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
        else:
            message_text = get_mess(10, "–û–ø–ª–∞—Ç–∞ –ø–æ–∫–∞ –Ω–µ –ø—Ä–∏—à–ª–∞")
    elif variant[0] == "yes":
        product = Product.objects.get(pk=int(variant[1]))
        if int(variant[2]) + 1 == len(product.ask.split(";")):
            # –í—ã–∑—ã–≤–∞–µ–º —Ü–µ–Ω—É
            price_list = [product.price1, product.price2, product.price3, product.price4, product.price5]
            message_text = get_mess(4, "–ö –æ–ø–ª–∞—Ç–µ: {price} —Ä—É–±.").format(price=price_list[p.level - 1])
            keyboard = [[InlineKeyboardButton(get_menu(6, "–ö—É–ø–∏—Ç—å"), callback_data='buy-' + str(product.pk))]]
            reply_markup = InlineKeyboardMarkup(keyboard)
        else:
            message_text = product.ask.split(";")[int(variant[2]) + 1]
            keyboard = [
                [InlineKeyboardButton("–î–∞", callback_data='yes-' + str(product.pk) + "-" + str(int(variant[2]) + 1)),
                 InlineKeyboardButton("–ù–µ—Ç", callback_data='no-' + str(product.pk) + "0")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
    elif variant[0] == "no":
        message_text = get_mess(14, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä")
    # query.answer()
    if type(reply_markup) == str:
        if message_text != "":
            context.bot.sendMessage(chat_id=chat_id, text=message_text)
        # query.edit_message_text(
        #     text=message_text
        # )
    else:
        context.bot.sendMessage(chat_id=chat_id, text=message_text, reply_markup=reply_markup)
        # query.edit_message_text(
        #     text=message_text,
        #     reply_markup=reply_markup
        # )


class Command(BaseCommand):
    help = '–¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç'

    def handle(self, *args, **options):
        # –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        request = Request(
            connect_timeout=0.5,
            read_timeout=1.0,
        )
        bot = Bot(
            request=request,
            token=settings.TOKEN,
        )
        print(bot.get_me())

        # –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        updater = Updater(
            bot=bot,
            use_context=True,
        )

        message_handler = MessageHandler(Filters.text, do_echo)
        media_handler = MessageHandler(Filters.document, message_files)
        photo_handler = MessageHandler(Filters.photo, message_files)
        updater.dispatcher.add_handler(message_handler)
        updater.dispatcher.add_handler(media_handler)
        updater.dispatcher.add_handler(photo_handler)

        updater.dispatcher.add_handler(CallbackQueryHandler(button))
        # –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–µ—Å–∫–æ–Ω–µ—á–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        updater.start_polling()
        updater.idle()
